x-env-project: &project-env
  COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
  DEBUG: ${DEBUG}

x-env-db: &db-env
  <<: *project-env
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}

x-env-django: &django-env
  <<: *db-env
  PYTHONUNBUFFERED: ${PYTHONUNBUFFERED}
  PYTHONDONTWRITEBYTECODE: ${PYTHONDONTWRITEBYTECODE}
  DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
  DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
  DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
  DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
  USER: ${USER}
  GROUP: ${GROUP}
  USER_ID: ${USER_ID}
  GROUP_ID: ${GROUP_ID}

services:
  #Django
  backend:
    user: ${USER_ID}:${GROUP_ID}
    environment:
      <<: *django-env
    container_name: backend
    restart: always
    command:
      - bash
      - -c
      - |
        python manage.py collectstatic --noinput
        ${BACKEND_RUN_SRVR_COMMAND}
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        USER: ${USER}
        GROUP: ${GROUP}
    hostname: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend
      - ./static:/static
      - ./logs/backend:/logs
    depends_on:
      db:
        condition: service_healthy

  #postresql
  db:
    image: circleci/postgres
    hostname: ${POSTGRES_HOST}
    volumes:
      - $HOME/meteo-database/:/var/lib/postgresql
      - ./scripts/setup-pg_hba_for_dev.sh:/scripts/setup-pg_hba.sh
    environment:
      <<: *db-env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: "pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -t 5"
      interval: 30s
      timeout: 10s
      retries: 5
